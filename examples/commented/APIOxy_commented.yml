# A commented version of APIOxy input file
# Note that all these options are also available throught the API using a Jupyter notebook
# Note that all inline comments must be removed before running this file

apioxy:
  project: project_name  # required
  project_directory: project_name  # optional, should be given to avoid saving all output in the shared source folder
  api_structures:
  - label: API_label_1
    smiles: SMILES_1
    concentration: 1.89e-06 # in mol/ml
  - label: API_label_2  # as many of these as you want
    smiles: SMILES_2
    concentration: 3.50e-06 # in mol/ml
  zeneth_output_paths:  # still not implemented, wait to hear from Oscar when this is functional
    - path_1_corresponding_to_API_1
    - path_2_corresponding_to_API_2  # as many of these as you want, put null if one API doesn;t have a Zeneth output file, this list should correspond in order to the API species above
  run_in_parallel: false  # whether to run all APIs in parallel


# arguments related to T3
t3:
  options:  # everything here is OPTIONAL, feel free to only fill in 'max_T3_walltime'
    flux_adapter: RMG  # optional, can use any implemented simulation adapter, default: 'RMG'
    profiles_adapter: RMG  # optional, can use any implemented simulation adapter, default: 'RMG'
    collision_violators_thermo: false  # optional, whether to calculate thermo of species participating in collision violating reactions, default: ``False``
    collision_violators_rates: false  # optional, whether to calculate rates of core collision violating reactions, default: ``False``. If ``True``, will only be done if all thermo of species in these reactions were calculated (will force ``collision_violators_thermo`` to be ``True`` if it's not
    all_core_species: false  # optional, whether to calculate thermo for all core species, default: ``False``
    all_core_reactions: false  # optional, whether to calculate rates (to be implemented) for all core species, default: ``False``
    fit_missing_GAV: false  # optional, whether to capture wrong thermo groups of species estimated by RMG and attempt to calculate them, default: ``False``
    max_T3_iterations: 10  # optional, maximum T3 iterations, default: 10
    max_RMG_exceptions_allowed: 10  # optional, maximum number of times RMG is allowed to crash, default: 10
    max_RMG_walltime: '00:02:00:00'  # optional, default: ``None``
    max_T3_walltime: '01:00:00:00'  # optional, default: ``None``
    library_name: T3  # optional, default: 'T3'

  # sensitivity analysis (optional block, T3 can ran w/o SA)
  sensitivity:  # this is all optional, if this entire block is not specified, APIOxy will use RMG with 10 to SA species and 10 top SA reactions
    adapter: RMG  # *required* (this is how SA is requested), can use any implemented simulation adapter
    atol: 1e-6  # optional, default: 1e-6
    rtol: 1e-4  # optional, default: 1e-4
    global_observables: ['IgD', 'ESR', 'SL']  # optional, only implemented in the Cantera adapter, default: ``None``
    SA_threshold: 0.01  # optional, default: 0.01
    top_SA_species: 10  # optional, used per observable to determine thermo to calculate, default: 10
    top_SA_reactions: 10  # optional, used per observable to determine rates to calculate (to be implemented) as well as
                          # thermo of species participating in these reactions, default: 10

# arguments related to RMG, required
rmg:

  # database - this is optional, defaults are below. It is helpful to specify it if you want to add additional libraries, e.g. previous calculations APIOxy made for you
  database:  
    thermo_libraries:
      - BurkeH2O2
      - API_soup
      - DFT_QCI_thermo
      - primaryThermoLibrary
      - CBS_QB3_1dHR
      - CurranPentane']
    kinetics_libraries:
      - BurkeH2O2inN2
      - API_soup
      - NOx2018
      - Klippenstein_Glarborg2016
    seed_mechanisms: []  # optional, default: []
    kinetics_depositories: default  # optional, default: 'default'
    kinetics_families: default  # optional, default: 'default'
    kinetics_estimator: rate rules  # optional, default: 'rate rules'

  # species (initial mixture) (a required block)
  # concentration units are mole fraction for gas phase and mol/cm3 for liquid phase
  # must specify either `smiles`, 'inchi', or `adj`
  # not specifying `concentration` is allowed and will result in a 0 initial concentration.
  species:
    - label: water
      smiles: O
      concentration: 0.0278,  # in mol/ml
      solvent: true
    - label: methanol
      smiles: CO
      concentration: 0.0124  # in mol/ml
    - label: AIBN
      smiles: CC(C)(C#N)/N=N/C(C)(C)C#N
      concentration: 4.900e-6  # in mol/ml
    - label: O2
      smiles: '[O][O]'
      concentration: 2.730e-7,  # in mol/cm^3
      constant: true
    - label: N2
      smiles: N#N
      concentration: 4.819e-7,  # in mol/cm^3
      constant: true

  # reactors (List[dict]) - THis is entirely optional, APIOxy will run a liquid phase reactor at 313 K for 72 hrs by default
  # reactor type can be either 'gas batch constant T P', or 'liquid batch constant T V'
  # at least one of the three termination criteria must be given per reactor
  # note that having a termination time is recommended, it will also be used for the simulations
  # for species concentration profiles and SA. If not specified, the chemical time at which RMG terminated due to other
  # termination criteria will be used.
  # users may specify as many reactors as they wish, yet the must all be either gas or liquid phase
  reactors:
    - type: gas batch constant T P
      T: [800, 1750]  # Could be a float (single T) or a list (range of Ts), Units: K
      P: 1e0  # could be a float (single P) or a list (range of P), Units: bar
      termination_conversion:
        'ethane': 0.2
      termination_time: [5, 's']  # allowed units: 'micro-s', 'ms', 's', 'hours', 'days'
      termination_rate_ratio: 0.01
      conditions_per_iteration: 12  # optional, number of times variable ranged-reactor conditions are ran per RMG iteration (nSims)

  # model - this is optional, core tolerances are by default [0.20, 0.10, 0.05]
  model:
    # primary_tolerances:
    core_tolerance: [0.05, 0.01]  # optional, default:
    atol: 1e-16  # optional, default: 1e-16
    rtol: 1e-8  # optional, default: 1e-8
    # filtering:
    filter_reactions: false  # optional, filtering reactions
    filter_threshold: 1e8  # optional, filtering reactions
    # pruning:
    tolerance_interrupt_simulation: [0.05, 0.01]  # optional, float or list, pruning, will be set equal to core_tolerance if not specified
    min_core_size_for_prune: 50  # optional, pruning
    min_species_exist_iterations_for_prune: 2  # optional, pruning
    tolerance_keep_in_edge: 0.02  # optional, pruning
    maximum_edge_species: 1000000  # optional, pruning
    tolerance_thermo_keep_species_in_edge:  # optional, thermo pruning
    # staging:
    max_num_species: None  # optional, staging
    # dynamics:
    tolerance_move_edge_reaction_to_core:  # optional, dynamics criterion
    tolerance_move_edge_reaction_to_core_interrupt: 5.0  # optional, dynamics criterion
    dynamics_time_scale: (0.0, 'sec')  # optional, dynamics criterion
    # multiple_objects:
    max_num_objs_per_iter: 1  # optional, multiple objects
    terminate_at_max_objects: false  # optional, multiple objects
    # misc:
    ignore_overall_flux_criterion: false  # optional
    tolerance_branch_reaction_to_core: 0.001  # optional
    branching_index: 0.5  # optional
    branching_ratio_max: 1.0  # optional
    # surface algorithm
    tolerance_move_edge_reaction_to_surface: None
    tolerance_move_surface_species_to_core: None
    tolerance_move_surface_reaction_to_core: None
    tolerance_move_edge_reaction_to_surface_interrupt: None

  # options (optional block)
  options:
    seed_name: Seed  # optional, name for the generated seed, default: 'Seed'
    save_edge: true  # optional, saves the Edge, default: ``True`` in T3 (``False`` in RMG) (saveEdgeSpecies)
    save_html: false  # optional, default: ``False`` (have T3 generate HTML for the core after the last T3 iteration))
    generate_seed_each_iteration: true  # optional, save a seed at each iteration, default: ``True``
    save_seed_to_database: false  # optional, save the seed to the database as well, default: ``False``
    units: si  # optional, currently RMG does not support any other units set
    generate_plots: false  # optional, will generate RMG job statistics plots (core and edge size, memory used), default: ``False``
    save_simulation_profiles: false  # optional, save RMG .csv simulation profiles files, default: ``False``
    verbose_comments: false  # optional, adds significant verbosity to the chemkin files, default: ``False``
    keep_irreversible: false  # optional, don't force library reactions to be reversible, default: ``False``
    trimolecular_product_reversible: true  # optional, allow families with three products to react in the reverse direction, default: ``True``
    save_seed_modulus: -1  # optional, save the seed every n iterations (-1 to only save the last iteration), default: -1

  # species constraints - this is entirely optional, T3 will automate this based on heuristics in accordance with the API chemical formula (per API if running several)
  species_constraints:
    allowed: ['input species', 'seed mechanisms', 'reaction libraries']  # optional, allow species from these sources to bypass the constraints, default: ['input species', 'seed mechanisms', 'reaction libraries']
    max_C_atoms: 10  # required
    max_O_atoms: 10  # required
    max_N_atoms: 10  # required
    max_Si_atoms: 10  # required
    max_S_atoms: 10  # required
    max_heavy_atoms: 10  # required
    max_radical_electrons: 2  # required
    max_singlet_carbenes: 1  # optional, default: 1
    max_carbene_radicals: 0  # optional, default: 0
    allow_singlet_O2: true  # optional, allows singlet O2 **from the input file**, default: ``True`` in T3 (``False`` in RMG)

# arguments related to QM calcs, required to run QM calcs, otherwise T3 will only spawn RMG
qm:
  # currently only ARC is supported, we'd like to also incorporate AutoTST
  # All legal ARC arguments are allowed here
  # Note: If ``species`` or ``reactions`` are specified, ARC will be spawned prior to RMG to calculate them first
  adapter: ARC
  # any legal ARC argument can come here, see https://reactionmechanismgenerator.github.io/ARC/api/main.html
  adaptive_levels:
    (1, 6):
      opt_level: wb97xd/wb97xd/def2tzvp
      sp: ccsd(t)-f12/aug-cc-pvtz-f12
    (7, 30):
      conformer_level:
        method: wb97xd
        basis: def2svp
      opt_level:
        method: wb97xd
        basis: def2tzvp
      sp_level:
        method: dlpno-ccsd(T)
        basis: def2-tzvp
        auxiliary_basis: def2-tzvp/c
    (31, 'inf'):
      opt_level: wb97xd/wb97xd/def2tzvp
  level_of_theory: b3lyp/6-31g(d,p)  # the level should match a level of theory for which we have bond-additivity corrections in Arkane, see: http://reactionmechanismgenerator.github.io/RMG-Py/users/arkane/input.html#model-chemistry
  species:  # species added here will be computed before APIOxy's algorithm is executed, the result will be used by APIOxy
    - label: vinoxy
      smiles: C=C[O]